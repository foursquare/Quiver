// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gen_proto/quiver.proto

package foursquare_quiver_client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SingleHFileKeyRequest struct {
	HfileName string `protobuf:"bytes,1,opt,name=hfile_name,json=hfileName,proto3" json:"hfile_name,omitempty"`
	// Keys to look up.
	// Note: For efficiency, keys must be sorted by the client. If they are not, behavior is undefined.
	SortedKeys           [][]byte `protobuf:"bytes,2,rep,name=sorted_keys,json=sortedKeys,proto3" json:"sorted_keys,omitempty"`
	PerKeyValueLimit     int32    `protobuf:"varint,3,opt,name=per_key_value_limit,json=perKeyValueLimit,proto3" json:"per_key_value_limit,omitempty"`
	CountOnly            bool     `protobuf:"varint,4,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleHFileKeyRequest) Reset()         { *m = SingleHFileKeyRequest{} }
func (m *SingleHFileKeyRequest) String() string { return proto.CompactTextString(m) }
func (*SingleHFileKeyRequest) ProtoMessage()    {}
func (*SingleHFileKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_quiver_79d5e3bb209066e5, []int{0}
}
func (m *SingleHFileKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleHFileKeyRequest.Unmarshal(m, b)
}
func (m *SingleHFileKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleHFileKeyRequest.Marshal(b, m, deterministic)
}
func (dst *SingleHFileKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleHFileKeyRequest.Merge(dst, src)
}
func (m *SingleHFileKeyRequest) XXX_Size() int {
	return xxx_messageInfo_SingleHFileKeyRequest.Size(m)
}
func (m *SingleHFileKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleHFileKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SingleHFileKeyRequest proto.InternalMessageInfo

func (m *SingleHFileKeyRequest) GetHfileName() string {
	if m != nil {
		return m.HfileName
	}
	return ""
}

func (m *SingleHFileKeyRequest) GetSortedKeys() [][]byte {
	if m != nil {
		return m.SortedKeys
	}
	return nil
}

func (m *SingleHFileKeyRequest) GetPerKeyValueLimit() int32 {
	if m != nil {
		return m.PerKeyValueLimit
	}
	return 0
}

func (m *SingleHFileKeyRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

type SingleHFileKeyResponse struct {
	Values               map[int32][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KeyCount             int32            `protobuf:"varint,2,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SingleHFileKeyResponse) Reset()         { *m = SingleHFileKeyResponse{} }
func (m *SingleHFileKeyResponse) String() string { return proto.CompactTextString(m) }
func (*SingleHFileKeyResponse) ProtoMessage()    {}
func (*SingleHFileKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_quiver_79d5e3bb209066e5, []int{1}
}
func (m *SingleHFileKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleHFileKeyResponse.Unmarshal(m, b)
}
func (m *SingleHFileKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleHFileKeyResponse.Marshal(b, m, deterministic)
}
func (dst *SingleHFileKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleHFileKeyResponse.Merge(dst, src)
}
func (m *SingleHFileKeyResponse) XXX_Size() int {
	return xxx_messageInfo_SingleHFileKeyResponse.Size(m)
}
func (m *SingleHFileKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleHFileKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleHFileKeyResponse proto.InternalMessageInfo

func (m *SingleHFileKeyResponse) GetValues() map[int32][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *SingleHFileKeyResponse) GetKeyCount() int32 {
	if m != nil {
		return m.KeyCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SingleHFileKeyRequest)(nil), "foursquare.quiver.client.SingleHFileKeyRequest")
	proto.RegisterType((*SingleHFileKeyResponse)(nil), "foursquare.quiver.client.SingleHFileKeyResponse")
	proto.RegisterMapType((map[int32][]byte)(nil), "foursquare.quiver.client.SingleHFileKeyResponse.ValuesEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuiverServiceClient is the client API for QuiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuiverServiceClient interface {
	GetValuesSingle(ctx context.Context, in *SingleHFileKeyRequest, opts ...grpc.CallOption) (*SingleHFileKeyResponse, error)
}

type quiverServiceClient struct {
	cc *grpc.ClientConn
}

func NewQuiverServiceClient(cc *grpc.ClientConn) QuiverServiceClient {
	return &quiverServiceClient{cc}
}

func (c *quiverServiceClient) GetValuesSingle(ctx context.Context, in *SingleHFileKeyRequest, opts ...grpc.CallOption) (*SingleHFileKeyResponse, error) {
	out := new(SingleHFileKeyResponse)
	err := c.cc.Invoke(ctx, "/foursquare.quiver.client.QuiverService/GetValuesSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuiverServiceServer is the server API for QuiverService service.
type QuiverServiceServer interface {
	GetValuesSingle(context.Context, *SingleHFileKeyRequest) (*SingleHFileKeyResponse, error)
}

func RegisterQuiverServiceServer(s *grpc.Server, srv QuiverServiceServer) {
	s.RegisterService(&_QuiverService_serviceDesc, srv)
}

func _QuiverService_GetValuesSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleHFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuiverServiceServer).GetValuesSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foursquare.quiver.client.QuiverService/GetValuesSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuiverServiceServer).GetValuesSingle(ctx, req.(*SingleHFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuiverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "foursquare.quiver.client.QuiverService",
	HandlerType: (*QuiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValuesSingle",
			Handler:    _QuiverService_GetValuesSingle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gen_proto/quiver.proto",
}

func init() { proto.RegisterFile("gen_proto/quiver.proto", fileDescriptor_quiver_79d5e3bb209066e5) }

var fileDescriptor_quiver_79d5e3bb209066e5 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0x2b, 0x31,
	0x14, 0xc6, 0x6f, 0x3a, 0xb7, 0xa5, 0x73, 0xda, 0xcb, 0x2d, 0xb9, 0xd7, 0x32, 0x54, 0xc4, 0xa1,
	0xab, 0xd9, 0x38, 0x95, 0xba, 0x51, 0x71, 0x27, 0xfe, 0x81, 0x8a, 0x62, 0x2a, 0x6e, 0x87, 0xb1,
	0x9e, 0xd6, 0xd0, 0x34, 0x33, 0x4d, 0x32, 0x03, 0x79, 0x02, 0x9f, 0xc4, 0x57, 0xf1, 0xb9, 0x64,
	0x32, 0x5d, 0x88, 0x28, 0xe8, 0x2e, 0xe7, 0x3b, 0x9c, 0xef, 0xfc, 0xbe, 0x24, 0xd0, 0x5f, 0xa0,
	0x4c, 0x72, 0x95, 0x99, 0x6c, 0xb4, 0x2e, 0x78, 0x89, 0x2a, 0x76, 0x05, 0x0d, 0xe6, 0x59, 0xa1,
	0xf4, 0xba, 0x48, 0x15, 0xc6, 0x9b, 0xc6, 0x4c, 0x70, 0x94, 0x66, 0xf8, 0x42, 0x60, 0x6b, 0xca,
	0xe5, 0x42, 0xe0, 0xe5, 0x39, 0x17, 0x38, 0x41, 0xcb, 0x70, 0x5d, 0xa0, 0x36, 0x74, 0x07, 0xe0,
	0x69, 0xce, 0x05, 0x26, 0x32, 0x5d, 0x61, 0x40, 0x42, 0x12, 0xf9, 0xcc, 0x77, 0xca, 0x75, 0xba,
	0x42, 0xba, 0x0b, 0x1d, 0x9d, 0x29, 0x83, 0x8f, 0xc9, 0x12, 0xad, 0x0e, 0x1a, 0xa1, 0x17, 0x75,
	0x19, 0xd4, 0xd2, 0x04, 0xad, 0xa6, 0x7b, 0xf0, 0x2f, 0x47, 0x55, 0x75, 0x93, 0x32, 0x15, 0x05,
	0x26, 0x82, 0xaf, 0xb8, 0x09, 0xbc, 0x90, 0x44, 0x4d, 0xd6, 0xcb, 0x51, 0x4d, 0xd0, 0xde, 0x57,
	0x8d, 0xab, 0x4a, 0xaf, 0xd6, 0xcd, 0xb2, 0x42, 0x9a, 0x24, 0x93, 0xc2, 0x06, 0xbf, 0x43, 0x12,
	0xb5, 0x99, 0xef, 0x94, 0x1b, 0x29, 0xec, 0xf0, 0x95, 0x40, 0xff, 0x23, 0xa7, 0xce, 0x33, 0xa9,
	0x91, 0xde, 0x41, 0xcb, 0x2d, 0xd0, 0x01, 0x09, 0xbd, 0xa8, 0x33, 0x3e, 0x89, 0xbf, 0x4a, 0x1b,
	0x7f, 0xee, 0x10, 0x3b, 0x0c, 0x7d, 0x26, 0x8d, 0xb2, 0x6c, 0xe3, 0x45, 0xb7, 0xc1, 0xaf, 0xd0,
	0x1d, 0x41, 0xd0, 0x70, 0xd0, 0xed, 0x25, 0xda, 0xd3, 0xaa, 0x1e, 0x1c, 0x41, 0xe7, 0xdd, 0x0c,
	0xed, 0x81, 0xb7, 0x44, 0xeb, 0xee, 0xa8, 0xc9, 0xaa, 0x23, 0xfd, 0x0f, 0x4d, 0xe7, 0xe3, 0x26,
	0xbb, 0xac, 0x2e, 0x8e, 0x1b, 0x87, 0x64, 0xfc, 0x4c, 0xe0, 0xcf, 0xad, 0x83, 0x9a, 0xa2, 0x2a,
	0xf9, 0x0c, 0x69, 0x09, 0x7f, 0x2f, 0xd0, 0xd4, 0x7e, 0x35, 0x20, 0x1d, 0x7d, 0x3f, 0x82, 0x7b,
	0xac, 0xc1, 0xfe, 0x4f, 0x33, 0x0f, 0x7f, 0x3d, 0xb4, 0xdc, 0xdf, 0x38, 0x78, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xbb, 0xb4, 0xf9, 0x49, 0x35, 0x02, 0x00, 0x00,
}
